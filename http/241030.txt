IP  프로토콜은 무엇인가?
내 주소 상대방의 주소를 가지고 내가 보낼 메시지를 보내는 과정 규약을 말한다.
이 프로토콜에는 몇 가지 한계가 있다.

1. 비연결성
: 패킷을 받을 대상이 없거나 서비스가 불능 상태여도 패킷 전송이 가능하다

2. 비신뢰성
: 중간에 패킷이 유실될 가능성
: 패킷이 순서대로 오지 않을 가능성

3. 프로그램 구분
: 내 컴퓨터는 고유의 ip를 가지고 있는데 여러가지 프로그램을 사용중이라면 어떤 프로그램에 와야 하는 메시지인지 모르는 문제가 생김


인터넷 프로토콜 스택의 4계층
애플리케이션 계층 - HTTP, FTP
전송 계층 - TCP, UDP
인터넷 계층 - IP
네트워크 인터페이스 계층

ip프로토콜의 한계를 해결화는 TCP

TCP(전송 제어 프로토콜)
- 연결 지향 - TCP 3 way handshake(가상 연결)
- 데이터 전달 보증
- 순서 보장
- 신뢰할 수 있는 프로토콜
- 현재는 대부분  TCP  사용

TCP 3 way handshake(가상 연결) 과정
1.  SYN(접속 요청)(나-> 너)
: 나 너의 컴퓨터에 접속하고 싶어

2. SYN+ACk(접속 요청 + 요청 수락)(너-> 나)
: 오케이 나도 너 컴퓨터에 접속하고 싶어. 너가 접속 요청한 거 수락할게

3. ACK(요청 수락)(나->너)
: 오키 나 너의 요청 수락할게

4. 데이터 전송

이 과정을 통해서 확실하게 연결이 된 후에 데이터 전송이 되는 것을 보장할 수 있다.
요즘에는 최적화가 되서 3번 ACK 연결을 보낼 때 데이터 전송을 같이 보낸다고 한다.
그래서 데이터가 유실되더라도 내가 보낸 요청에 응답이 없으면 이상하다는 것을 바로 인지할 수 있어서 데이터 전달 보증이 되고
1,2,3 번 순으로 요청을 보냈는데 1,3,2 번 순으로 도착을 했다면 2번부터 다시 보내라는 패킷 요청을 보낸다 이로써 순서 보장도 가능하다.

UDP 는 IP와 딱히 다른 건 없고 포트가 추가된 것 뿐이다. 흰 도화지 같은 거라서 필요에 따라 기능을 확장할 수 있다.

PORT
같은 IP내에서 프로세스를 구분하기 위해 쓰는 것으로
IP가 아파트라면 포트는 몇동 몇호 라고 할 수 있다.

DNS(도메인 네임 시스템)
전화번호부 같은 것으로 도메인 명을 치면 ip주소로 변환해주는 시스템을 말한다.
ex) google.com-> 200.0.0.1 이런식으로 바꿔줌


HTTP는 Stateless

Stateful, Stateless 차이
- 상태 유지: 중간에 다른 점원으로 바뀌면 안된다( 바뀔 때는 상태 정보를 다른 점원에게 미리 알려줘야 한다.)=> 한개의 서버는 하나의 클라이언트만 계속 상대해야 하며 중간에 서버가 죽어버리면 클라이언트는 처음부터 다시 해야 하는 문제점이 생김
ex) 로그인, 세션, 쿠키 등등
- 무상태: 중간에 다른 점원으로 바뀌어도 된다.
	- 갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.
	- 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
ex) 단순 정보 소개 화면
- 무상태는 응답 서버를 쉽게 바꿀 수 있다. -> 무한한 서버 증설 가능

웹 어플리케이션을 설계할 때는 최대한 무상태로 설계해야하지만 정말 어쩔 수 없는 경우에만 상태 유지를 한다 정도로 생각해야한다.


비 연결성
=> HTTP 는 비연결성 모델
=> 빠른 응답 가능
=> 서버 자원을 매우 효율적으로 사용할 수 있음


멱등(Idempotent)
GET=> 멱등	=> 조회하는 것이라 같은 GET요청을 여러번 해도 리소스가 변하지 않는다
PUT=> 멱등	=> 기존에 것이 있다면 덮어씌우고 없으면 새로 만드는 작업이기 때문에 결과적으로 리소스가 변하지 않는다
DELETE=> 멱등	=> 삭제를 여러번 한다고 결과적으로 달라지지 않아서 멱등하다.
POST=> 멱등X	=> 결제를 두 번 호출한다면 결과적으로 두 번의 결제가 이루어지기 때문에 멱등하지 않다.


이 과정에서 중간에 다른 클라이언트가 해당 리소스의 데이터를 바꾸지 않는다는 전체하에 멱등을 판단하는 것이다.

캐시는 get만 사용한다. 다른 것에 사용하기에는 본문 내용까지 캐시적용이 되어야 하기 때문

